{"ast":null,"code":"import { profileActions } from \"../slices/profileSlice\";\nimport { authActions } from \"../slices/authSlice\";\nimport request from \"../../utils/request\";\nimport { toast } from \"react-toastify\";\n\n// Get User Profile\nexport function getUserProfile(userId) {\n  return async dispatch => {\n    try {\n      const {\n        data\n      } = await request.get(`/api/users/profile/${userId}`);\n      dispatch(profileActions.setProfile(data));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n// // Upload Profile Photo\n// export function uploadProfilePhoto(newPhoto) {\n//   return async (dispatch, getState) => {\n//     try {\n//       const { data } = await request.post(\n//         `/api/users/profile/profile-photo-upload`,\n//         newPhoto,\n//         {\n//           headers: {\n//             Authorization: \"Bearer \" + getState().auth.user.token,\n//             \"Content-Type\": \"multipart/form-data\",\n//           },\n//         }\n//       );\n\n//       dispatch(profileActions.setProfilePhoto(data.profilePhoto));\n//       dispatch(authActions.setUserPhoto(data.profilePhoto));\n//       toast.success(data.message);\n\n//       // modify the user in local storage with new photo\n//       const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n//       user.profilePhoto = data?.profilePhoto;\n//       localStorage.setItem(\"userInfo\", JSON.stringify(user));\n//     } catch (error) {\n//       toast.error(error.response.data.message);\n//     }\n//   };\n// }\n\n// Update Profile\nexport function updateProfile(userId, profile) {\n  return async (dispatch, getState) => {\n    try {\n      const {\n        data\n      } = await request.put(`/api/users/profile/${userId}`, profile, {\n        headers: {\n          Authorization: \"Bearer \" + getState().auth.user.token\n        }\n      });\n      dispatch(profileActions.updateProfile(data));\n      dispatch(authActions.setUsername(data.username));\n\n      // modify the user in local storage with new username\n      const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n      user.username = data === null || data === void 0 ? void 0 : data.username;\n      localStorage.setItem(\"userInfo\", JSON.stringify(user));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n// Delete Profile (Account)\nexport function deleteProfile(userId) {\n  return async (dispatch, getState) => {\n    try {\n      dispatch(profileActions.setLoading());\n      const {\n        data\n      } = await request.delete(`/api/users/profile/${userId}`, {\n        headers: {\n          Authorization: \"Bearer \" + getState().auth.user.token\n        }\n      });\n      dispatch(profileActions.setIsProfileDeleted());\n      toast.success(data === null || data === void 0 ? void 0 : data.message);\n      setTimeout(() => dispatch(profileActions.clearIsProfileDeleted()), 2000);\n    } catch (error) {\n      toast.error(error.response.data.message);\n      dispatch(profileActions.clearLoading());\n    }\n  };\n}\n\n// Get Users Count (for admin dashboard)\nexport function getUsersCount() {\n  return async (dispatch, getState) => {\n    try {\n      const {\n        data\n      } = await request.get(`/api/users/count`, {\n        headers: {\n          Authorization: \"Bearer \" + getState().auth.user.token\n        }\n      });\n      dispatch(profileActions.setUserCount(data));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n// Get All Users Profile (for admin dashboard)\nexport function getAllUsersProfile() {\n  return async (dispatch, getState) => {\n    try {\n      const {\n        data\n      } = await request.get(`/api/users/profile`, {\n        headers: {\n          Authorization: \"Bearer \" + getState().auth.user.token\n        }\n      });\n      dispatch(profileActions.setProfiles(data));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}","map":{"version":3,"names":["profileActions","authActions","request","toast","getUserProfile","userId","dispatch","data","get","setProfile","error","response","message","updateProfile","profile","getState","put","headers","Authorization","auth","user","token","setUsername","username","JSON","parse","localStorage","getItem","setItem","stringify","deleteProfile","setLoading","delete","setIsProfileDeleted","success","setTimeout","clearIsProfileDeleted","clearLoading","getUsersCount","setUserCount","getAllUsersProfile","setProfiles"],"sources":["D:/Blog-pro/frontend/src/redux/apiCalls/profileApiCall.js"],"sourcesContent":["import { profileActions } from \"../slices/profileSlice\";\nimport { authActions } from \"../slices/authSlice\";\nimport request from \"../../utils/request\";\nimport { toast } from \"react-toastify\";\n\n// Get User Profile\nexport function getUserProfile(userId) {\n  return async (dispatch) => {\n    try {\n      const { data } = await request.get(`/api/users/profile/${userId}`);\n      dispatch(profileActions.setProfile(data));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n// // Upload Profile Photo\n// export function uploadProfilePhoto(newPhoto) {\n//   return async (dispatch, getState) => {\n//     try {\n//       const { data } = await request.post(\n//         `/api/users/profile/profile-photo-upload`,\n//         newPhoto,\n//         {\n//           headers: {\n//             Authorization: \"Bearer \" + getState().auth.user.token,\n//             \"Content-Type\": \"multipart/form-data\",\n//           },\n//         }\n//       );\n\n//       dispatch(profileActions.setProfilePhoto(data.profilePhoto));\n//       dispatch(authActions.setUserPhoto(data.profilePhoto));\n//       toast.success(data.message);\n\n//       // modify the user in local storage with new photo\n//       const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n//       user.profilePhoto = data?.profilePhoto;\n//       localStorage.setItem(\"userInfo\", JSON.stringify(user));\n//     } catch (error) {\n//       toast.error(error.response.data.message);\n//     }\n//   };\n// }\n\n// Update Profile\nexport function updateProfile(userId,profile) {\n  return async (dispatch, getState) => {\n    try {\n      const { data } = await request.put(\n        `/api/users/profile/${userId}`,\n        profile,\n        {\n          headers: {\n            Authorization: \"Bearer \" + getState().auth.user.token,\n          },\n        }\n      );\n\n      dispatch(profileActions.updateProfile(data));\n      dispatch(authActions.setUsername(data.username));\n\n      // modify the user in local storage with new username\n      const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n      user.username = data?.username;\n      localStorage.setItem(\"userInfo\", JSON.stringify(user));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n// Delete Profile (Account)\nexport function deleteProfile(userId) {\n  return async (dispatch, getState) => {\n    try {\n      dispatch(profileActions.setLoading());\n      const { data } = await request.delete(\n        `/api/users/profile/${userId}`,\n        {\n          headers: {\n            Authorization: \"Bearer \" + getState().auth.user.token,\n          },\n        }\n      );\n\n      dispatch(profileActions.setIsProfileDeleted());\n      toast.success(data?.message);\n      setTimeout(() => dispatch(profileActions.clearIsProfileDeleted()), 2000);\n    } catch (error) {\n      toast.error(error.response.data.message);\n      dispatch(profileActions.clearLoading());\n    }\n  };\n}\n\n// Get Users Count (for admin dashboard)\nexport function getUsersCount() {\n  return async (dispatch, getState) => {\n    try {\n      const { data } = await request.get(\n        `/api/users/count`,\n        {\n          headers: {\n            Authorization: \"Bearer \" + getState().auth.user.token,\n          },\n        }\n      );\n\n      dispatch(profileActions.setUserCount(data));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n// Get All Users Profile (for admin dashboard)\nexport function getAllUsersProfile() {\n  return async (dispatch, getState) => {\n    try {\n      const { data } = await request.get(\n        `/api/users/profile`,\n        {\n          headers: {\n            Authorization: \"Bearer \" + getState().auth.user.token,\n          },\n        }\n      );\n\n      dispatch(profileActions.setProfiles(data));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,wBAAwB;AACvD,SAASC,WAAW,QAAQ,qBAAqB;AACjD,OAAOC,OAAO,MAAM,qBAAqB;AACzC,SAASC,KAAK,QAAQ,gBAAgB;;AAEtC;AACA,OAAO,SAASC,cAAcA,CAACC,MAAM,EAAE;EACrC,OAAO,MAAOC,QAAQ,IAAK;IACzB,IAAI;MACF,MAAM;QAAEC;MAAK,CAAC,GAAG,MAAML,OAAO,CAACM,GAAG,CAAC,sBAAsBH,MAAM,EAAE,CAAC;MAClEC,QAAQ,CAACN,cAAc,CAACS,UAAU,CAACF,IAAI,CAAC,CAAC;IAC3C,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdP,KAAK,CAACO,KAAK,CAACA,KAAK,CAACC,QAAQ,CAACJ,IAAI,CAACK,OAAO,CAAC;IAC1C;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO,SAASC,aAAaA,CAACR,MAAM,EAACS,OAAO,EAAE;EAC5C,OAAO,OAAOR,QAAQ,EAAES,QAAQ,KAAK;IACnC,IAAI;MACF,MAAM;QAAER;MAAK,CAAC,GAAG,MAAML,OAAO,CAACc,GAAG,CAChC,sBAAsBX,MAAM,EAAE,EAC9BS,OAAO,EACP;QACEG,OAAO,EAAE;UACPC,aAAa,EAAE,SAAS,GAAGH,QAAQ,CAAC,CAAC,CAACI,IAAI,CAACC,IAAI,CAACC;QAClD;MACF,CACF,CAAC;MAEDf,QAAQ,CAACN,cAAc,CAACa,aAAa,CAACN,IAAI,CAAC,CAAC;MAC5CD,QAAQ,CAACL,WAAW,CAACqB,WAAW,CAACf,IAAI,CAACgB,QAAQ,CAAC,CAAC;;MAEhD;MACA,MAAMH,IAAI,GAAGI,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC;MACzDP,IAAI,CAACG,QAAQ,GAAGhB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEgB,QAAQ;MAC9BG,YAAY,CAACE,OAAO,CAAC,UAAU,EAAEJ,IAAI,CAACK,SAAS,CAACT,IAAI,CAAC,CAAC;IACxD,CAAC,CAAC,OAAOV,KAAK,EAAE;MACdP,KAAK,CAACO,KAAK,CAACA,KAAK,CAACC,QAAQ,CAACJ,IAAI,CAACK,OAAO,CAAC;IAC1C;EACF,CAAC;AACH;;AAEA;AACA,OAAO,SAASkB,aAAaA,CAACzB,MAAM,EAAE;EACpC,OAAO,OAAOC,QAAQ,EAAES,QAAQ,KAAK;IACnC,IAAI;MACFT,QAAQ,CAACN,cAAc,CAAC+B,UAAU,CAAC,CAAC,CAAC;MACrC,MAAM;QAAExB;MAAK,CAAC,GAAG,MAAML,OAAO,CAAC8B,MAAM,CACnC,sBAAsB3B,MAAM,EAAE,EAC9B;QACEY,OAAO,EAAE;UACPC,aAAa,EAAE,SAAS,GAAGH,QAAQ,CAAC,CAAC,CAACI,IAAI,CAACC,IAAI,CAACC;QAClD;MACF,CACF,CAAC;MAEDf,QAAQ,CAACN,cAAc,CAACiC,mBAAmB,CAAC,CAAC,CAAC;MAC9C9B,KAAK,CAAC+B,OAAO,CAAC3B,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEK,OAAO,CAAC;MAC5BuB,UAAU,CAAC,MAAM7B,QAAQ,CAACN,cAAc,CAACoC,qBAAqB,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;IAC1E,CAAC,CAAC,OAAO1B,KAAK,EAAE;MACdP,KAAK,CAACO,KAAK,CAACA,KAAK,CAACC,QAAQ,CAACJ,IAAI,CAACK,OAAO,CAAC;MACxCN,QAAQ,CAACN,cAAc,CAACqC,YAAY,CAAC,CAAC,CAAC;IACzC;EACF,CAAC;AACH;;AAEA;AACA,OAAO,SAASC,aAAaA,CAAA,EAAG;EAC9B,OAAO,OAAOhC,QAAQ,EAAES,QAAQ,KAAK;IACnC,IAAI;MACF,MAAM;QAAER;MAAK,CAAC,GAAG,MAAML,OAAO,CAACM,GAAG,CAChC,kBAAkB,EAClB;QACES,OAAO,EAAE;UACPC,aAAa,EAAE,SAAS,GAAGH,QAAQ,CAAC,CAAC,CAACI,IAAI,CAACC,IAAI,CAACC;QAClD;MACF,CACF,CAAC;MAEDf,QAAQ,CAACN,cAAc,CAACuC,YAAY,CAAChC,IAAI,CAAC,CAAC;IAC7C,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdP,KAAK,CAACO,KAAK,CAACA,KAAK,CAACC,QAAQ,CAACJ,IAAI,CAACK,OAAO,CAAC;IAC1C;EACF,CAAC;AACH;;AAEA;AACA,OAAO,SAAS4B,kBAAkBA,CAAA,EAAG;EACnC,OAAO,OAAOlC,QAAQ,EAAES,QAAQ,KAAK;IACnC,IAAI;MACF,MAAM;QAAER;MAAK,CAAC,GAAG,MAAML,OAAO,CAACM,GAAG,CAChC,oBAAoB,EACpB;QACES,OAAO,EAAE;UACPC,aAAa,EAAE,SAAS,GAAGH,QAAQ,CAAC,CAAC,CAACI,IAAI,CAACC,IAAI,CAACC;QAClD;MACF,CACF,CAAC;MAEDf,QAAQ,CAACN,cAAc,CAACyC,WAAW,CAAClC,IAAI,CAAC,CAAC;IAC5C,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdP,KAAK,CAACO,KAAK,CAACA,KAAK,CAACC,QAAQ,CAACJ,IAAI,CAACK,OAAO,CAAC;IAC1C;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}