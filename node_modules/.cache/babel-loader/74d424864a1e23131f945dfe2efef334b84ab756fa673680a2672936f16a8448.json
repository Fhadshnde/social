{"ast":null,"code":"import { postActions } from \"../slices/postSlice\";\nimport request from \"../../utils/request\";\nimport { toast } from \"react-toastify\";\n\n// Fetch Posts Based On Page Number\nexport function fetchPosts(pageNumber) {\n  return async dispatch => {\n    try {\n      const {\n        data\n      } = await request.get(`/api/posts?pageNumber=${pageNumber}`);\n      dispatch(postActions.setPosts(data));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n// Get Posts Count\nexport function getPostsCount() {\n  return async dispatch => {\n    try {\n      const {\n        data\n      } = await request.get(`/api/posts/count`);\n      dispatch(postActions.setPostsCount(data));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n// Fetch Posts Based On Category\nexport function fetchPostsBasedOnCategory(category) {\n  return async dispatch => {\n    try {\n      const {\n        data\n      } = await request.get(`/api/posts?category=${category}`);\n      dispatch(postActions.setPostsCate(data));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n// Create Post\nexport function createPost(newPost) {\n  return async (dispatch, getState) => {\n    try {\n      dispatch(postActions.setLoading());\n      await request.post(`/api/posts`, newPost, {\n        headers: {\n          Authorization: \"Bearer \" + getState().auth.user.token,\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      dispatch(postActions.setIsPostCreated());\n      setTimeout(() => dispatch(postActions.clearIsPostCreated()), 2000); // 2s\n    } catch (error) {\n      toast.error(error.response.data.message);\n      dispatch(postActions.clearLoading());\n    }\n  };\n}\n\n// Fetch Single Post\nexport function fetchSinglePost(postId) {\n  return async dispatch => {\n    try {\n      const {\n        data\n      } = await request.get(`/api/posts/${postId}`);\n      dispatch(postActions.setPost(data));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n// Toggle Like Post\nexport function toggleLikePost(postId) {\n  return async (dispatch, getState) => {\n    try {\n      const {\n        data\n      } = await request.put(`/api/posts/like/${postId}`, {}, {\n        headers: {\n          Authorization: \"Bearer \" + getState().auth.user.token\n        }\n      });\n      dispatch(postActions.setLike(data));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n// Update Post Image\nexport function updatePostImage(newImage, postId) {\n  return async (dispatch, getState) => {\n    try {\n      await request.put(`/api/posts/update-image/${postId}`, newImage, {\n        headers: {\n          Authorization: \"Bearer \" + getState().auth.user.token,\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      toast.success(\"New post image uploaded successfully\");\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n// Update Post\nexport function updatePost(newPost, postId) {\n  return async (dispatch, getState) => {\n    try {\n      const {\n        data\n      } = await request.put(`/api/posts/${postId}`, newPost, {\n        headers: {\n          Authorization: \"Bearer \" + getState().auth.user.token\n        }\n      });\n      dispatch(postActions.setPost(data));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n// Delete Post\nexport function deletePost(postId) {\n  return async (dispatch, getState) => {\n    try {\n      const {\n        data\n      } = await request.delete(`/api/posts/${postId}`, {\n        headers: {\n          Authorization: \"Bearer \" + getState().auth.user.token\n        }\n      });\n      dispatch(postActions.deletePost(data.postId));\n      toast.success(data.message);\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n// Get All Posts\nexport function getAllPosts() {\n  return async dispatch => {\n    try {\n      const {\n        data\n      } = await request.get(`/api/posts`);\n      dispatch(postActions.setPosts(data));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}","map":{"version":3,"names":["postActions","request","toast","fetchPosts","pageNumber","dispatch","data","get","setPosts","error","response","message","getPostsCount","setPostsCount","fetchPostsBasedOnCategory","category","setPostsCate","createPost","newPost","getState","setLoading","post","headers","Authorization","auth","user","token","setIsPostCreated","setTimeout","clearIsPostCreated","clearLoading","fetchSinglePost","postId","setPost","toggleLikePost","put","setLike","updatePostImage","newImage","success","updatePost","deletePost","delete","getAllPosts"],"sources":["D:/Blog-pro/frontend/src/redux/apiCalls/postApiCall.js"],"sourcesContent":["import { postActions } from \"../slices/postSlice\";\nimport request from \"../../utils/request\";\nimport { toast } from \"react-toastify\";\n\n// Fetch Posts Based On Page Number\nexport function fetchPosts(pageNumber) {\n  return async (dispatch) => {\n    try {\n      const { data } = await request.get(`/api/posts?pageNumber=${pageNumber}`);\n      dispatch(postActions.setPosts(data));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n// Get Posts Count\nexport function getPostsCount() {\n  return async (dispatch) => {\n    try {\n      const { data } = await request.get(`/api/posts/count`);\n      dispatch(postActions.setPostsCount(data));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n// Fetch Posts Based On Category\nexport function fetchPostsBasedOnCategory(category) {\n  return async (dispatch) => {\n    try {\n      const { data } = await request.get(`/api/posts?category=${category}`);\n      dispatch(postActions.setPostsCate(data));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n// Create Post\nexport function createPost(newPost) {\n  return async (dispatch, getState) => {\n    try {\n      dispatch(postActions.setLoading());\n      await request.post(`/api/posts`, newPost, {\n        headers: {\n          Authorization: \"Bearer \" + getState().auth.user.token,\n          \"Content-Type\": \"multipart/form-data\",\n        },\n      });\n\n      dispatch(postActions.setIsPostCreated());\n      setTimeout(() => dispatch(postActions.clearIsPostCreated()), 2000); // 2s\n    } catch (error) {\n      toast.error(error.response.data.message);\n      dispatch(postActions.clearLoading());\n    }\n  };\n}\n\n// Fetch Single Post\nexport function fetchSinglePost(postId) {\n  return async (dispatch) => {\n    try {\n      const { data } = await request.get(`/api/posts/${postId}`);\n      dispatch(postActions.setPost(data));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n// Toggle Like Post\nexport function toggleLikePost(postId) {\n  return async (dispatch,getState) => {\n    try {\n      const { data } = await request.put(`/api/posts/like/${postId}`, {}, {\n        headers: {\n          Authorization: \"Bearer \" + getState().auth.user.token,\n        }\n      });\n      dispatch(postActions.setLike(data));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n// Update Post Image\nexport function updatePostImage(newImage,postId) {\n  return async (dispatch,getState) => {\n    try {\n      await request.put(`/api/posts/update-image/${postId}`, newImage, {\n        headers: {\n          Authorization: \"Bearer \" + getState().auth.user.token,\n          \"Content-Type\":\"multipart/form-data\",\n        }\n      });\n      toast.success(\"New post image uploaded successfully\");\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n// Update Post\nexport function updatePost(newPost,postId) {\n  return async (dispatch,getState) => {\n    try {\n      const { data } = await request.put(`/api/posts/${postId}`, newPost, {\n        headers: {\n          Authorization: \"Bearer \" + getState().auth.user.token,\n        }\n      });\n      dispatch(postActions.setPost(data));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n// Delete Post\nexport function deletePost(postId) {\n  return async (dispatch,getState) => {\n    try {\n      const { data } = await request.delete(`/api/posts/${postId}`, {\n        headers: {\n          Authorization: \"Bearer \" + getState().auth.user.token,\n        }\n      });\n      dispatch(postActions.deletePost(data.postId));\n      toast.success(data.message);\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}\n\n// Get All Posts\nexport function getAllPosts() {\n  return async (dispatch) => {\n    try {\n      const { data } = await request.get(`/api/posts`);\n      dispatch(postActions.setPosts(data));\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}